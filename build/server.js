<<<<<<< HEAD
// Generated by CoffeeScript 1.7.1
var americano, fs, newApp, path, port, start;
=======
// Generated by CoffeeScript 1.9.0
var port, start;
>>>>>>> 95d0785fad0c21a4f96bf50b6af6e224172f5c42

americano = require('americano');

fs = require('fs');

path = require('path');

newApp = function(root, callback) {
  var options;
  options = {
    name: 'Calendar',
<<<<<<< HEAD
    root: root || __dirname
  };
  return americano.newApp(options, callback);
};

start = function(options, callback) {
  var config, configPath;
  if (options == null) {
    options = {};
  }
  options.name = 'Calendar';
  options.port = options.port;
  options.host = process.env.HOST || "0.0.0.0";
  options.root = options.root || __dirname;
  configPath = path.join(process.cwd(), 'config.json');
  if (!fs.existsSync(configPath)) {
    config = {
      apps: {}
    };
    fs.writeFileSync(configPath, JSON.stringify(config));
  }
  return americano.start(options, function(app, server) {
    var Realtimer, User, realtime;
=======
    port: port,
    host: process.env.HOST || "0.0.0.0",
    root: __dirname
  }, function(app, server) {
    var Realtimer, User, localization, realtime;
>>>>>>> 95d0785fad0c21a4f96bf50b6af6e224172f5c42
    User = require('./server/models/user');
    localization = require('./server/libs/localization_manager');
    Realtimer = require('cozy-realtime-adapter');
    realtime = Realtimer({
      server: server
    }, ['event.*']);
    realtime.on('user.*', function() {
      return User.updateUser();
    });
    return User.updateUser(function(err) {
      return localization.initialize(function() {
        var Alarm, Event;
        Event = require('./server/models/event');
        Alarm = require('./server/models/alarm');
        return Event.migrateAll(function() {
          return Alarm.migrateAll(function() {
            return callback(err, app, server);
          });
        });
      });
    });
  });
};

if (!module.parent) {
  port = process.env.PORT || 9113;
  start({
    port: port
  }, function(err) {
    if (err) {
      console.log("Initialization failed, not starting");
      console.log(err.stack);
      return process.exit(1);
    }
  });
}

module.exports.start = start;

module.exports.newApp = newApp;
