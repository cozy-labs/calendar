<<<<<<< HEAD
// Generated by CoffeeScript 1.7.1
var Alarm, Event, User, fs, ical, moment, multiparty, time;

time = require('time');

fs = require('fs');

moment = require('moment');
=======
// Generated by CoffeeScript 1.9.0
var Event, fs, ical, multiparty;
>>>>>>> 95d0785fad0c21a4f96bf50b6af6e224172f5c42

multiparty = require('multiparty');

ical = require('cozy-ical');

Event = require('../models/event');

multiparty = require('multiparty');

fs = require('fs');

module.exports["export"] = function(req, res) {
  var calendar, calendarId;
  calendarId = req.params.calendarid;
  calendar = new ical.VCalendar({
    organization: 'Cozy',
    title: 'Cozy Calendar',
    name: calendarId
  });
  return Event.byCalendar(calendarId, function(err, events) {
    var event, _i, _len;
    if (err) {
      return res.send({
        error: true,
        msg: 'Server error occurred while retrieving data'
      });
    } else {
      if (events.length > 0) {
        for (_i = 0, _len = events.length; _i < _len; _i++) {
          event = events[_i];
          calendar.add(event.toIcal());
        }
      }
      res.header({
        'Content-Type': 'text/calendar'
      });
      return res.send(calendar.toString());
    }
  });
};

module.exports["import"] = function(req, res, next) {
  var form;
  form = new multiparty.Form();
  return form.parse(req, function(err, fields, files) {
    var cleanUp, file, parser, _ref;
    if (err) {
      return next(err);
    }
    cleanUp = function() {
      var arrfile, file, key, _results;
      _results = [];
      for (key in files) {
        arrfile = files[key];
        _results.push((function() {
          var _i, _len, _results1;
          _results1 = [];
          for (_i = 0, _len = arrfile.length; _i < _len; _i++) {
            file = arrfile[_i];
            _results1.push(fs.unlink(file.path, function(err) {
              if (err) {
                return console.log("failed to cleanup file", file.path, err);
              }
            }));
          }
          return _results1;
        })());
      }
      return _results;
    };
<<<<<<< HEAD
  })(this));
};

module.exports["import"] = function(req, res) {
  var form;
  form = new multiparty.Form();
  return form.parse(req, function(err, fields, files) {
    var file, parser;
    if (files.file.length > 0) {
      file = files.file[0];
      parser = new ical.ICalParser();
      return parser.parseFile(file.path, function(err, result) {
        if (err) {
          console.log(err);
          console.log(err.message);
          return res.send({
            error: 'error occured while saving file'
          }, 500);
        } else {
          return User.getTimezone(function(err, timezone) {
            return fs.unlink(file.path, function() {
              return res.send({
                events: Event.extractEvents(result),
                alarms: Alarm.extractAlarms(result, timezone)
              });
            });
          });
        }
      });
    } else {
      return res.send({
        error: 'no file sent'
      }, 500);
    }
=======
    if (!(file = (_ref = files['file']) != null ? _ref[0] : void 0)) {
      res.send({
        error: 'no file sent'
      }, 400);
      return cleanUp();
    }
    parser = new ical.ICalParser();
    return parser.parseFile(file.path, function(err, result) {
      var calendarName, _ref1;
      if (err) {
        console.log(err);
        console.log(err.message);
        res.send(500, {
          error: 'error occured while saving file'
        });
        return cleanUp();
      } else {
        calendarName = (result != null ? (_ref1 = result.model) != null ? _ref1.name : void 0 : void 0) || 'my calendar';
        res.send(200, {
          events: Event.extractEvents(result, calendarName),
          calendar: {
            name: calendarName
          }
        });
        return cleanUp();
      }
    });
>>>>>>> 95d0785fad0c21a4f96bf50b6af6e224172f5c42
  });
};
